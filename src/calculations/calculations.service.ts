import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import slugify from 'slugify';

import { Material } from '../materials/entities/material.entity';
import { CalculationGroup } from './entities/calculation-group.entity';
import { Calculation } from './entities/calculation.entity';
import { CreateCalculationDto } from './dto/create-calculation.dto';
import { CreateCalculationGroupDto } from './dto/create-calculation-group.dto';
import { UpdateCalculationDto } from './dto/update-calculation.dto';
import { UpdateCalculationGroupDto } from './dto/update-calculation-group.dto';

@Injectable()
export class CalculationsService {
  constructor(
    @InjectRepository(CalculationGroup)
    private readonly groupRepo: Repository<CalculationGroup>,

    @InjectRepository(Calculation)
    private readonly calcRepo: Repository<Calculation>,

    @InjectRepository(Material)
    private readonly materialRepo: Repository<Material>, // üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  ) { }

  // üîÑ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –≤ cellConfig
  private updateCellConfigPrices(cellConfig: any, materialsMap: Map<number, number>) {
    if (!cellConfig || !cellConfig.materials) {
      return cellConfig;
    }

    const updatedMaterials = { ...cellConfig.materials };

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const singleMaterialTypes = ['switch', 'rza', 'counter', 'sr', 'tsn', 'tn'];
    singleMaterialTypes.forEach(type => {
      if (updatedMaterials[type] && updatedMaterials[type].id) {
        const freshPrice = materialsMap.get(updatedMaterials[type].id);
        if (freshPrice !== undefined) {
          updatedMaterials[type] = {
            ...updatedMaterials[type],
            price: freshPrice,
          };
        }
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const arrayMaterialTypes = ['tt', 'pu', 'disconnector', 'busbar', 'busbridge'];
    arrayMaterialTypes.forEach(type => {
      if (Array.isArray(updatedMaterials[type])) {
        updatedMaterials[type] = updatedMaterials[type].map((material: any) => {
          if (material && material.id) {
            const freshPrice = materialsMap.get(material.id);
            if (freshPrice !== undefined) {
              return {
                ...material,
                price: freshPrice,
              };
            }
          }
          return material;
        });
      }
    });

    return {
      ...cellConfig,
      materials: updatedMaterials,
    };
  }

  // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
  async createGroup(dto: CreateCalculationGroupDto): Promise<CalculationGroup> {
    const group = this.groupRepo.create({
      name: dto.name,
      slug: slugify(dto.name, { lower: true, strict: true }),
      voltageType: dto.voltageType,
    });

    return this.groupRepo.save(group);
  }

  // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
  async getAllGroups(): Promise<CalculationGroup[]> {
    return this.groupRepo.find();
  }

  // ‚úÖ –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –ø–æ slug
  async getGroupBySlug(slug: string): Promise<CalculationGroup> {
    const group = await this.groupRepo.findOne({ where: { slug } });
    if (!group) throw new NotFoundException('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return group;
  }

  // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏
  async createCalculation(dto: CreateCalculationDto): Promise<Calculation> {
    const group = await this.groupRepo.findOne({ where: { id: dto.groupId } });
    if (!group) throw new NotFoundException('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    const calc = this.calcRepo.create({
      name: dto.name,
      slug: dto.slug,
      data: dto.data,
      group,
    });

    return this.calcRepo.save(calc);
  }

  // ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
  async getCalculationsByGroupSlug(slug: string): Promise<Calculation[]> {
    const group = await this.getGroupBySlug(slug);
    return this.calcRepo.find({
      where: { group: { id: group.id } },
      order: { name: 'ASC' },
    });
  }

  // ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∫–∞–ª—å–∫—É–ª—è—Ü–∏—é –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ –ª–µ—Ç—É
  async getCalculation(
    groupSlug: string,
    calcSlug: string,
  ): Promise<Calculation> {
    const group = await this.getGroupBySlug(groupSlug);

    const calc = await this.calcRepo.findOne({
      where: {
        slug: calcSlug,
        group: { id: group.id },
      },
      relations: ['group'],
    });

    if (!calc) throw new NotFoundException('–ö–∞–ª—å–∫—É–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    // üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    const freshMaterials = await this.materialRepo.find();
    const materialsMap = new Map(freshMaterials.map((m) => [m.id, m.price]));

    // üõ° –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è data –∏–ª–∏ categories
    if (!calc.data || !Array.isArray(calc.data.categories)) {
      calc.data = { categories: [] };
      return calc;
    }

    // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã
    const updatedCategories = calc.data.categories.map((cat) => ({
      ...cat,
      items: Array.isArray(cat.items)
        ? cat.items.map((item) => {
          if (!item.id) return item; // —Ä—É—á–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª
          const freshPrice = materialsMap.get(item.id);
          return {
            ...item,
            price: freshPrice ?? item.price,
          };
        })
        : [],
    }));

    calc.data.categories = updatedCategories;

    // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ cellConfig
    if (calc.data.cellConfig) {
      calc.data.cellConfig = this.updateCellConfigPrices(calc.data.cellConfig, materialsMap);
    }

    return calc;
  }

  // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏
  async updateCalculation(
    groupSlug: string,
    calcSlug: string,
    dto: UpdateCalculationDto,
  ): Promise<Calculation> {
    const group = await this.getGroupBySlug(groupSlug);

    const calc = await this.calcRepo.findOne({
      where: {
        slug: calcSlug,
        group: { id: group.id },
      },
      relations: ['group'],
    });

    if (!calc) throw new NotFoundException('–ö–∞–ª—å–∫—É–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (dto.name) calc.name = dto.name;
    if (dto.slug) calc.slug = dto.slug;
    if (dto.data) calc.data = dto.data;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞–ª—å–∫—É–ª—è—Ü–∏—é
    const updatedCalc = await this.calcRepo.save(calc);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const freshMaterials = await this.materialRepo.find();
    const materialsMap = new Map(freshMaterials.map((m) => [m.id, m.price]));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏
    if (updatedCalc.data && Array.isArray(updatedCalc.data.categories)) {
      const updatedCategories = updatedCalc.data.categories.map((cat) => ({
        ...cat,
        items: Array.isArray(cat.items)
          ? cat.items.map((item) => {
            if (!item.id) return item;
            const freshPrice = materialsMap.get(item.id);
            return {
              ...item,
              price: freshPrice ?? item.price,
            };
          })
          : [],
      }));

      updatedCalc.data.categories = updatedCategories;
    }

    // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ cellConfig
    if (updatedCalc.data && updatedCalc.data.cellConfig) {
      updatedCalc.data.cellConfig = this.updateCellConfigPrices(updatedCalc.data.cellConfig, materialsMap);
    }

    return updatedCalc;
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏ –ø–æ groupSlug –∏ calcSlug
  async deleteCalculation(groupSlug: string, calcSlug: string): Promise<void> {
    const group = await this.getGroupBySlug(groupSlug);
    const calc = await this.calcRepo.findOne({
      where: { slug: calcSlug, group: { id: group.id } },
    });
    if (!calc) throw new NotFoundException('–ö–∞–ª—å–∫—É–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    await this.calcRepo.remove(calc);
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–æ ID
  async deleteGroupById(id: number): Promise<void> {
    console.log('=== –£–î–ê–õ–ï–ù–ò–ï –ì–†–£–ü–ü–´ –ü–û ID ===');
    console.log('–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π ID:', id, '—Ç–∏–ø:', typeof id);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≥—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º ID
    const allGroups = await this.groupRepo.find();
    console.log('–í—Å–µ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ:', allGroups.map(g => `ID:${g.id}, slug:[${g.slug}]`));
    
    const group = await this.groupRepo.findOne({ 
      where: { id }, 
      relations: ['calculations'] 
    });
    
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ ID:', group ? `–Ω–∞–π–¥–µ–Ω–∞ - id=${group.id}, slug=[${group.slug}]` : '–ù–ï –ù–ê–ô–î–ï–ù–ê');
    
    if (!group) {
      console.log('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ');
      throw new NotFoundException('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    console.log('‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ...');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏ ‚Äî —É–¥–∞–ª—è–µ–º –∏—Ö –≤—Ä—É—á–Ω—É—é
    if (group.calculations && group.calculations.length > 0) {
      console.log(`–£–¥–∞–ª—è—é ${group.calculations.length} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–ª—å–∫—É–ª—è—Ü–∏–π...`);
      await this.calcRepo.remove(group.calculations);
    }
    
    await this.groupRepo.remove(group);
    console.log('‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:', group.slug);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≥—Ä—É–ø–ø–µ
  async getAllCalculations(): Promise<Calculation[]> {
    return this.calcRepo.find({ order: { name: 'ASC' } });
  }

  // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
  async updateGroup(
    slug: string,
    dto: UpdateCalculationGroupDto,
  ): Promise<CalculationGroup> {
    console.log('=== –°–ï–†–í–ò–°: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ì–†–£–ü–ü–´ ===');
    console.log('–ò—â–µ–º –≥—Ä—É–ø–ø—É –ø–æ slug:', slug);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ
    const allGroups = await this.groupRepo.find();
    console.log('–í—Å–µ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ:', allGroups.map(g => `slug:[${g.slug}], id:${g.id}`));
    
    const group = await this.getGroupBySlug(slug);
    console.log('–ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞:', group ? `id=${group.id}, slug=[${group.slug}]` : '–ù–ï –ù–ê–ô–î–ï–ù–ê');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (dto.name) {
      group.name = dto.name;
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π slug –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
      group.slug = slugify(dto.name, { lower: true, strict: true });
      console.log('–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ, –Ω–æ–≤—ã–π slug:', group.slug);
    }
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º dto.slug - slug –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (dto.voltageType !== undefined) {
      group.voltageType = dto.voltageType;
    }
    
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { 
      name: group.name, 
      slug: group.slug, 
      voltageType: group.voltageType 
    });
    
    return this.groupRepo.save(group);
  }
}
