import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import slugify from 'slugify';

import { Material } from '../materials/entities/material.entity';
import { CalculationGroup } from './entities/calculation-group.entity';
import { Calculation } from './entities/calculation.entity';
import { CreateCalculationDto } from './dto/create-calculation.dto';
import { CreateCalculationGroupDto } from './dto/create-calculation-group.dto';
import { UpdateCalculationDto } from './dto/update-calculation.dto';

@Injectable()
export class CalculationsService {
  constructor(
    @InjectRepository(CalculationGroup)
    private readonly groupRepo: Repository<CalculationGroup>,

    @InjectRepository(Calculation)
    private readonly calcRepo: Repository<Calculation>,

    @InjectRepository(Material)
    private readonly materialRepo: Repository<Material>, // üëà –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  ) { }

  // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
  async createGroup(dto: CreateCalculationGroupDto): Promise<CalculationGroup> {
    const group = this.groupRepo.create({
      name: dto.name,
      slug: dto.slug || slugify(dto.name, { lower: true, strict: true }),
    });

    return this.groupRepo.save(group);
  }

  // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
  async getAllGroups(): Promise<CalculationGroup[]> {
    return this.groupRepo.find();
  }

  // ‚úÖ –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –ø–æ slug
  async getGroupBySlug(slug: string): Promise<CalculationGroup> {
    const group = await this.groupRepo.findOne({ where: { slug } });
    if (!group) throw new NotFoundException('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return group;
  }

  // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏
  async createCalculation(dto: CreateCalculationDto): Promise<Calculation> {
    const group = await this.groupRepo.findOne({ where: { id: dto.groupId } });
    if (!group) throw new NotFoundException('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    const calc = this.calcRepo.create({
      name: dto.name,
      slug: dto.slug,
      data: dto.data,
      group,
    });

    return this.calcRepo.save(calc);
  }

  // ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏ –≥—Ä—É–ø–ø—ã
  async getCalculationsByGroupSlug(slug: string): Promise<Calculation[]> {
    const group = await this.getGroupBySlug(slug);
    return this.calcRepo.find({
      where: { group: { id: group.id } },
      order: { name: 'ASC' },
    });
  }

  // ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∫–∞–ª—å–∫—É–ª—è—Ü–∏—é –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ –ª–µ—Ç—É
  async getCalculation(groupSlug: string, calcSlug: string): Promise<Calculation> {
    const group = await this.getGroupBySlug(groupSlug);

    const calc = await this.calcRepo.findOne({
      where: {
        slug: calcSlug,
        group: { id: group.id },
      },
      relations: ['group'],
    });

    if (!calc) throw new NotFoundException('–ö–∞–ª—å–∫—É–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    // üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    const freshMaterials = await this.materialRepo.find();
    const materialsMap = new Map(freshMaterials.map((m) => [m.id, m.price]));

    // üõ° –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è data –∏–ª–∏ categories
    if (!calc.data || !Array.isArray(calc.data.categories)) {
      calc.data = { categories: [] };
      return calc;
    }

    // üîÅ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã
    const updatedCategories = calc.data.categories.map((cat) => ({
      ...cat,
      items: Array.isArray(cat.items)
        ? cat.items.map((item) => {
          if (!item.id) return item; // —Ä—É—á–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª
          const freshPrice = materialsMap.get(item.id);
          return {
            ...item,
            price: freshPrice ?? item.price,
          };
        })
        : [],
    }));

    calc.data.categories = updatedCategories;

    return calc;
  }

  // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏
  async updateCalculation(
    groupSlug: string,
    calcSlug: string,
    dto: UpdateCalculationDto,
  ): Promise<Calculation> {
    const group = await this.getGroupBySlug(groupSlug);

    const calc = await this.calcRepo.findOne({
      where: {
        slug: calcSlug,
        group: { id: group.id },
      },
      relations: ['group'],
    });

    if (!calc) throw new NotFoundException('–ö–∞–ª—å–∫—É–ª—è—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (dto.name) calc.name = dto.name;
    if (dto.slug) calc.slug = dto.slug;
    if (dto.data) calc.data = dto.data;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞–ª—å–∫—É–ª—è—Ü–∏—é
    const updatedCalc = await this.calcRepo.save(calc);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    const freshMaterials = await this.materialRepo.find();
    const materialsMap = new Map(freshMaterials.map((m) => [m.id, m.price]));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ª—å–∫—É–ª—è—Ü–∏–∏
    if (updatedCalc.data && Array.isArray(updatedCalc.data.categories)) {
      const updatedCategories = updatedCalc.data.categories.map((cat) => ({
        ...cat,
        items: Array.isArray(cat.items)
          ? cat.items.map((item) => {
            if (!item.id) return item;
            const freshPrice = materialsMap.get(item.id);
            return {
              ...item,
              price: freshPrice ?? item.price,
            };
          })
          : [],
      }));

      updatedCalc.data.categories = updatedCategories;
    }

    return updatedCalc;
  }
}
